// Generated by CoffeeScript 1.8.0
(function() {
  var chai, should, sinon, sinonchai, _;

  require('coffee-script/register');

  chai = require('chai');

  should = chai.should();

  sinon = require('sinon');

  sinonchai = require('sinon-chai');

  chai.use(sinonchai);

  chai.config.includeStack = true;

  _ = require('lodash');

  describe("User", function() {
    it("User file should exist", function() {
      var User;
      return User = require('./../User.coffee');
    });
    it("user should be type of User", function() {
      var User, user;
      User = require('./../User.coffee');
      user = new User();
      return user.should.be["instanceof"](User);
    });
    it("User should have a name", function() {
      var User, user;
      User = require('./../User.coffee');
      user = new User();
      return user.name.should.not.equal(' ');
    });
    return it("A user should be able to create a game", function() {
      var Game, User, game, user;
      Game = require('./../Game.coffee');
      User = require('./../User.coffee');
      user = new User();
      game = user.createGame();
      return game.should.be["instanceof"](Game);
    });
  });

  describe("Game", function() {
    it("Game should exist", function() {
      var Game;
      return Game = require('./../Game.coffee');
    });
    it("game should be type of Game", function() {
      var Game, game;
      Game = require('./../Game.coffee');
      game = new Game();
      return game.should.be["instanceof"](Game);
    });
    it("A game should have an id", function() {
      var Game, game;
      Game = require('./../Game.coffee');
      game = new Game();
      return game.id.should.exist;
    });
    it("A game should have a unique id", function() {
      var Game, game1, game2;
      Game = require('./../Game.coffee');
      game1 = new Game();
      game2 = new Game();
      return game1.id.should.not.equal(game2.id);
    });
    it("a game should store the creators User.id", function() {
      var User, game, user;
      User = require('./../User.coffee');
      user = new User();
      game = user.createGame();
      return game.owner.should.equal(user.id);
    });
    it("A games first player should be the owner", function() {
      var User, game, user;
      User = require('./../User.coffee');
      user = new User();
      game = user.createGame();
      return _.size(game.players).should.equal(1);
    });
    it("A game should add players by id", function() {
      var User, additionalPlayer, game, gameCreator;
      User = require('./../User.coffee');
      gameCreator = new User();
      additionalPlayer = new User();
      game = gameCreator.createGame();
      game.addPlayer(additionalPlayer);
      return _.size(game.players).should.equal(2);
    });
    it("a Game should contain a board", function() {
      var User, additionalPlayer, game, gameCreator;
      User = require('./../User.coffee');
      gameCreator = new User();
      additionalPlayer = new User();
      game = gameCreator.createGame();
      game.addPlayer(additionalPlayer);
      return game.board.should.exist;
    });
    it("A game can be long(60),medium(40) or short(20) spaces long", function() {
      var Game, longGame, medGame, shortGame;
      Game = require('../Game.coffee');
      longGame = new Game(null, 'long');
      medGame = new Game(null, 'medium');
      shortGame = new Game(null, 'short');
      _.size(longGame.board.Spaces).should.equal(60);
      _.size(medGame.board.Spaces).should.equal(40);
      return _.size(shortGame.board.Spaces).should.equal(20);
    });
    return describe("Board", function() {
      it("It should exist", function() {
        var Board, board;
        Board = require('../Board.coffee');
        board = new Board();
        return board.should.be["instanceof"](Board);
      });
      it("A Board should contain spaces", function() {
        var Board, board;
        Board = require('../Board.coffee');
        board = new Board();
        return board.Spaces != null;
      });
      it("Spaces length should be defined from constructor", function() {
        var Board, board;
        Board = require('../Board.coffee');
        board = new Board(1, 10, {});
        return _.size(board.Spaces).should.equal(10);
      });
      it("Players should start on square 1", function() {
        var User, game, user, user2;
        User = require('./../User.coffee');
        user = new User();
        user2 = new User();
        game = user.createGame('short');
        game.players[1].position.should.equal(1);
        game.addPlayer(user2);
        return game.players[2].position.should.equal(1);
      });
      it("A player should move by a given amount", function() {
        var User, game, user, user2;
        User = require('./../User.coffee');
        user = new User();
        user2 = new User();
        game = user.createGame('short');
        game.addPlayer(user2);
        game.movePlayer(1, 5);
        game.movePlayer(2, 2);
        game.players[1].position.should.equal(6);
        return game.players[2].position.should.equal(3);
      });
      describe("dice roll", function() {
        it("should create a random number", function() {
          var diceRoll;
          diceRoll = function() {
            return Math.random();
          };
          return (diceRoll()).should.not.equal(diceRoll());
        });
        return it("should be a whole number within a defined range", function() {
          var User, game, lowerLimit, upperLimit, user, user2;
          User = require('./../User.coffee');
          user = new User();
          user2 = new User();
          game = user.createGame('short');
          game.addPlayer(user2);
          lowerLimit = 5;
          upperLimit = 20;
          return (game.diceRoll(5, 20)).should.be.within(lowerLimit, upperLimit);
        });
      });
      describe("Move a player by a dice roll", function() {
        return it("should move a given player by a random amount", function() {
          var User, game, lowerLimit, spyOn_Roll, upperLimit, user, user2;
          User = require('./../User.coffee');
          user = new User();
          user2 = new User();
          game = user.createGame('short');
          game.addPlayer(user2);
          lowerLimit = 5;
          upperLimit = 20;
          spyOn_Roll = sinon.spy(game, 'diceRoll');
          game.movePlayer(1);
          spyOn_Roll.called.should.equal(true);
          game.players[1].position.should.not.equal(1);
          game.movePlayer(2, 5);
          game.players[2].position.should.equal(6);
          return console.log(game.players[1], game.players[2]);
        });
      });
      return describe("A varying number of coins will be given on each space", function() {
        it("should generate coins randomly", function() {
          var User, firstsample, game, game2, res, res2, secondsample, user, user2;
          User = require('../User.coffee');
          user = new User();
          game = user.createGame();
          game2 = user.createGame();
          firstsample = _.sample(game.board.Spaces, 4);
          res = _.pluck(firstsample, 'coins');
          secondsample = _.sample(game2.board.Spaces, 4);
          res2 = _.pluck(secondsample, 'coins');
          console.log(res, res2);
          res.should.not.equal(res2);
          it("a player starts with 0 coins", function() {
            return User = require('../User.coffee');
          });
          user = new User();
          user2 = new User();
          game = user.createGame();
          game.addPlayer(user2);
          game.players[1].coins.should.equal(0);
          return game.players[2].coins.should.equal(0);
        });
        return it("A player accumulates coins by landing on spaces", function() {
          var User, game, res, spyOn_giveCoin, user, user2;
          User = require('../User.coffee');
          user = new User();
          user2 = new User();
          game = user.createGame();
          game.addPlayer(user2);
          res = game.board.Spaces[7].coins;
          console.log(res);
          spyOn_giveCoin = sinon.spy(game.board, 'giveCoin');
          game.movePlayer(1, 6);
          console.log(game.players);
          return spyOn_giveCoin.should.have.been.calledWith(7, 1);
        });
      });
    });
  });

}).call(this);
